pipeline {
    agent {
        kubernetes {
            defaultContainer 'default'
            yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            component: builder
            lang: python
            app: amqp-content-router
        spec:
          containers:
          - name: default
            image: ${getImageFromDockerfile()}
            command:
            - cat
            tty: true
          - name: oc
            image: image-registry.openshift-image-registry.svc:5000/ci-cd/py:3.7
            command:
            - cat
            tty: true
            imagePullPolicy: Always
        """.stripIndent()
        }
    }
    options {
        timeout(time: 45, unit: 'MINUTES')
        skipDefaultCheckout()
    }
    environment {
        OC_PROJECT = 'vrt-intake'
        BASE_IMG = 'python:3.7'
        OC_URL = 'https://c113-e.private.eu-de.containers.cloud.ibm.com:30227'
        APP_NAME = 'amqp-content-router'
        BUILD_REF = calculateBuildConfigRef()
    }
    stages {
        stage('Checkout code') {
            steps {
                echo "Build ref: ${BUILD_REF}"
                checkout([$class: 'GitSCM', branches: [[name: "*/${BUILD_REF}"]],
                extensions: [[$class: 'LocalBranch']],
                userRemoteConfigs: [[credentialsId: 'meemoo-ci', url: "${GIT_URL}"]]])
                script{
                    env.GIT_SHORT_COMMIT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true)
                    env.IMAGE_TAG = sh(script: "git describe --tags || echo latest", returnStdout: true)
                }
            }
        }
        stage('Test code') {
            steps {
                sh 'pip install -r requirements.txt --extra-index-url http://do-prd-mvn-01.do.viaa.be:8081/repository/pypi-all/simple --trusted-host do-prd-mvn-01.do.viaa.be'
                sh 'cp .env.example .env'
                sh 'pytest -vvv --cov=./app --junit-xml=./tests/test_results.xml'
            }
        }
        stage('Build code') {
            steps {
                container('oc') {
                    script {
                        sh '''#!/bin/bash
                        login_oc.sh $OC_URL > /dev/null || echo ok
                        oc project $OC_PROJECT
                        oc import-image $BASE_IMG --confirm
                        if oc new-build -l ref=$GIT_SHORT_COMMIT --strategy=docker --name $APP_NAME-$GIT_SHORT_COMMIT --to $APP_NAME:$IMAGE_TAG -n $OC_PROJECT .; then
                            sleep 2
                            oc logs -f bc/$APP_NAME-$GIT_SHORT_COMMIT | egrep 'Push successful'
                        else
                            oc start-build $APP_NAME-$GIT_SHORT_COMMIT --wait=true
                        fi
                        '''
                    }
                }
            }
        }
        stage('Deploy INT') {
            when {
                anyOf {
                    changeRequest target: 'master'
                    changeRequest target: 'main'
                }
            }
            steps {
                container('oc') {
                    script {
                        echo 'Deploying to INT'
                        sh '''#!/bin/bash
                        login_oc.sh $OC_URL > /dev/null || echo ok
                        oc project $OC_PROJECT
                        oc tag $APP_NAME:$IMAGE_TAG $APP_NAME:int
                        # Patch the deployment in order to trigger rollout
                        # oc patch deployment $APP_NAME-int -p '{"spec": {"template": {"metadata": {"annotations": {"git-ref": "$IMAGE_TAG"}}}}}'
                        # Check the status of the rollout
                        # oc rollout status deployment/$APP_NAME-int --watch=true
                        '''
                    }
                }
            }
        }
        stage('Deploy QAS') {
            when {
                anyOf { branch 'master'; branch 'main' }
            }
            steps {
                container('oc') {
                    script {
                        sh '''#!/bin/bash
                        login_oc.sh $OC_URL > /dev/null || echo ok
                        oc project $OC_PROJECT
                        oc tag $APP_NAME:$IMAGE_TAG $APP_NAME:qas
                        # Patch the deployment in order to trigger rollout
                        oc patch deployment $APP_NAME-qas -p '{"spec": {"template": {"metadata": {"annotations": {"git-ref": "$IMAGE_TAG"}}}}}'
                        # Check the status of the rollout
                        oc rollout status deployment/$APP_NAME-qas --watch=true
                        '''
                    }
                }
            }
        }
        stage('Deploy PRD') {
            when {
                buildingTag()
            }
            steps {
                container('oc') {
                    script {
                        sh '''#!/bin/bash
                        login_oc.sh $OC_URL > /dev/null || echo ok
                        oc project $OC_PROJECT
                        oc tag $APP_NAME:$TAG_NAME $APP_NAME:prd
                        # Patch the deployment in order to trigger rollout
                        oc patch deployment $APP_NAME-prd -p '{"spec": {"template": {"metadata": {"annotations": {"git-ref": "$TAG_NAME"}}}}}'
                        # Check the status of the rollout
                        oc rollout status deployment/$APP_NAME-prd --watch=true
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                if (env.BRANCH_NAME.startsWith('PR')) {
                    setGitHubBuildStatus("Build", "SUCCESS")
                }
            }
        }
        failure {
            script {
                if (env.BRANCH_NAME.startsWith('PR')) {
                    setGitHubBuildStatus("Build", "FAILED")
                }
            }
        }
        always {
            container('default') {
                // Archive tets results
                script {
                    if (fileExists('./tests/test_results.xml')) {
                        junit 'tests/test_results.xml'
                    } else {
                        echo "No test results found"
                    }
                }
            }
        }
    }
}

void getImageFromDockerfile() {
    return 'python:3.7'
}

void setGitHubBuildStatus(String message, String state) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "${GIT_URL}"],
        //contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
    ])
}

def calculateBuildConfigRef() {
    if (env.TAG_NAME) {
        return env.TAG_NAME
    } else if (env.CHANGE_BRANCH) {
        return env.CHANGE_BRANCH
    } else {
        return env.BRANCH_NAME
    }
}
